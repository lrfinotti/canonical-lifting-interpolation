SetPath(":~/code/witt");
load "gt.m";

procedure log_str(s, start_time, verbose)
    if verbose then
        printf "[%o] %o\n", Realtime(start_time), s;
    end if;
end procedure;

function canonical_lifting_odd_char_one_step(
    a0, b0, p, n, prec,
    f, h,
    va, vb, vF, vH, vy,
    B, R, x_over_y_witt,
    start_time, verbose
)
    R<x0, y0, Fn, Hn, an, bn> := R;

    if verbose then
        printf "\nn = %o\n", n;
        printf "------\n";
    end if;

    // Compute Greenberg Transform
    witt_one := [R!1] cat [R!0 : i in [1..n]];
    witt_zero := [0 : i in [1..n+1]];

    lhs_gt_poly := [ [* witt_one, 0, 2 *] ]; // y^2

    gt_lhs := GT(lhs_gt_poly : vvars := witt_zero cat (vy cat [y0*Hn]));
    lhs0 := gt_lhs[n+1];

    log_str("Computed lhs.", start_time, verbose);

    if p eq 3 then
        // x^3 + ax^2 + b
        rhs_gt_poly := [[* witt_one,    3, 0 *],
                        [* va cat [an], 2, 0 *],
                        [* vb cat [bn], 0, 0 *]];
    else
        // x^3 + ax + b
        rhs_gt_poly := [[* witt_one,    3, 0 *],
                        [* va cat [an], 1, 0 *],
                        [* vb cat [bn], 0, 0 *]];
    end if;

    gt_rhs := GT(rhs_gt_poly : vvars := (vF cat [Fn]) cat witt_zero);
    rhs0 := gt_rhs[n+1];

    log_str("Computed rhs.", start_time, verbose);

    subst_for_2y0_topower_times_Hn := rhs0 - Coefficient(lhs0, Hn, 0);

    // Compute Fn_with_unknowns
    Fn_deriv := h^(-(p^n - 1) div (p - 1)) * f^((p^n - 1) div 2) - x0^(p^n - 1);
    for j in [1 .. (n-1)] do
        Fn_deriv := Fn_deriv - vF[j+1]^(p^(n-j) - 1) * Derivative(vF[j+1], x0);
    end for;

    Fn_degree_bound := ((n+2)*p^n - n*p^(n-1)) div 2;

    num_ci_s := Fn_degree_bound div p + 1;
    S := PolynomialRing(B, 6 + num_ci_s);

    // names := ["x0", "y0", "Fn", "Hn", "an", "bn"] cat
    //         ["c" cat IntegerToString(i) : i in [0 .. num_ci_s-1]];
    // AssignNames(~S, names);

    Fn_deriv := Evaluate(Fn_deriv, [S.1, S.2, S.3, S.4, S.5, S.6]);

    Fn_with_unknowns := S!0;
    for d in [0 .. Fn_degree_bound] do
        if ((d+1) mod p) ne 0 then
            Fn_with_unknowns +:= Coefficient(Fn_deriv, S.1, d)/(d+1) * S.1^(d+1);
        else
            Fn_with_unknowns +:= S.(7 + ((d+1) div p)) * S.1^(d+1);
        end if;
    end for;

    Fn_with_unknowns +:= S.7; // add c0
    P := Parent(Fn_with_unknowns);

    log_str("Computed Fn_with_unknowns.", start_time, verbose);

    // If necessary, ensure tau*(x/y) is regular at infinity
    if n gt 1 then
        x_over_y := x_over_y_witt[n+1];

        // Compute pullback
        argument := vF cat [Fn]    cat [0 : i in [1..(prec-n-1)]] cat
                    vy cat [y0*Hn] cat [0 : i in [1..(prec-n-1)]];

        pullback_num := Evaluate(Numerator(x_over_y), argument);
        pullback_den := Evaluate(Denominator(x_over_y), argument);

        log_str("  Computed pullback num/denom.", start_time, verbose);


        // Get rid of term with Hn (for now)
        Hn_term := - x0^(p^n) * y0^((n-1)*p^n + 1) * Hn;
        Hn_term_subs := - x0^(p^n)*y0^((n-2)*p^n)*subst_for_2y0_topower_times_Hn div 2;

        pullback_num_without_Hn := pullback_num - Hn_term + Hn_term_subs;

        log_str("  Substituted Hn.", start_time, verbose);

        // Compute scriptF/scriptG and scriptH
        scriptH := R!0;
        scriptF := R!0;
        scriptG := R!0;

        for term in Terms(pullback_num_without_Hn) do
            coeff := Coefficients(term)[1];
            x0_deg := Degree(term, x0);
            y0_deg := Degree(term, y0);
            if Degree(term, Fn) ne 0 then
                scriptH +:= coeff * x0^x0_deg * f^(y0_deg div 2);
            end if;

            if Degree(term, Fn) eq 0 and Degree(term, Hn) eq 0 and
               Degree(term, an) eq 0 and Degree(term, bn) eq 0 then
                if n mod 2 eq 0 then
                    scriptF +:= coeff * x0^x0_deg * f^(y0_deg div 2);
                else
                    scriptG +:= coeff * x0^x0_deg * f^(y0_deg div 2);
                end if;
            end if;
        end for;

        // Move to larger parent
        scriptH := Evaluate(scriptH, [S.1, S.2, S.3, S.4, S.5, S.6]);
        scriptF := Evaluate(scriptF, [S.1, S.2, S.3, S.4, S.5, S.6]);
        scriptG := Evaluate(scriptG, [S.1, S.2, S.3, S.4, S.5, S.6]);

        log_str("  Computed scriptF/scriptG and scriptH.", start_time, verbose);

        // Compute F_{n,1}
        Mprime := (3*p^(n-1) - 1)/2;

        F_n_1 := P!0;

        for term in Terms(Fn_with_unknowns) do
            if Degree(term, 1) gt Mprime then
                F_n_1 +:= term;
            end if;
        end for;

        // Figure out what should be zero
        if n mod 2 eq 0 then
            poly := scriptH * F_n_1 + scriptF;
            degree_bound := 3*(n+1)*p^n / 2;
        else
            poly := scriptH * F_n_1 + scriptG;
            degree_bound := (3*(n+1)*p^n  - 3) / 2;
        end if;

        should_be_zero := P!0;
        for term in Terms(poly) do
            if Degree(term, 1) ge degree_bound then
                should_be_zero +:= term;
            end if;
        end for;

        log_str("  Computed what should be zero.", start_time, verbose);

        // Solve system
        A := [];
        b := [];

        P := Parent(should_be_zero);

        for coeff in Coefficients(should_be_zero, 1) do
            if coeff eq 0 then
                continue;
            end if;
            row := [];
            for i in [5..Rank(P)] do
                Append(~row, Coefficient(coeff, P.i, 1));
            end for;
            Append(~A, row);
            Append(~b, -MonomialCoefficient(coeff, 1));
        end for;

        A := Matrix(B, A);
        b := VectorSpace(B, #b)!b;

        log_str("  Built system.", start_time, verbose);

        soln, kernel := Solution(Transpose(A), b);

        log_str("  Solved system.", start_time, verbose);

        sum_of_kernel_basis := &+Basis(kernel);

        subs := [P.i : i in [5..Rank(P)]];
        for i in [1..Rank(P)-4] do
            if sum_of_kernel_basis[i] ne 1 then
                subs[i] := soln[i];
            end if;
        end for;

        Fn_with_unknowns := Evaluate(Fn_with_unknowns, [S.1, S.2, S.3, S.4] cat subs);

        log_str("  Simplified Fn_with_unknowns.", start_time, verbose);
    end if;

    // Solve for rest of d_i's and c_i's
    num_di_s := ((n+3)*p^n - n*p^(n-1) - 3) div 2 + 1;
    S := PolynomialRing(B, 6 + num_ci_s + num_di_s);

    // names := ["x0", "y0", "Fn", "Hn", "an", "bn"] cat
    //          ["c" cat IntegerToString(i) : i in [0 .. num_ci_s-1]] cat
    //          ["d" cat IntegerToString(i) : i in [0 .. num_di_s-1]];
    // AssignNames(~S, names);

    offset := 6 + num_ci_s;

    Hn_with_unknowns := &+[S.(offset + i + 1) * S.1^i : i in [0..num_di_s-1]];

    log_str("Computed Hn_with_unknowns.", start_time, verbose);

    lhs1 := S!0;
    for term in Terms(lhs0) do
        x0_deg := Degree(term, 1);
        y0_deg := Degree(term, 2);
        Hn_deg := Degree(term, 4);

        coeff := term div (y0^y0_deg * Hn^Hn_deg) * f^(y0_deg div 2);
        lhs1 +:= Evaluate(coeff, [S.i : i in [1..6]]) * Hn_with_unknowns^Hn_deg;
    end for;

    Fn_with_unknowns := Evaluate(Fn_with_unknowns, [S.i : i in [1..Rank(P)]]); // Move Fn up
    rhs1 := Evaluate(rhs0, [S.1, S.2, Fn_with_unknowns, Hn_with_unknowns, S.5, S.6]);

    should_be_zero := lhs1 - rhs1;

    log_str("Computed what should be zero.", start_time, verbose);

    // Solve the system
    A := [];
    b := [];

    P := Parent(should_be_zero);

    for coeff in Coefficients(should_be_zero, 1) do
        if coeff eq 0 then
            continue;
        end if;
        row := [];
        for i in [5..Rank(P)] do
            Append(~row, Coefficient(coeff, P.i, 1));
        end for;
        Append(~A, row);
        Append(~b, -MonomialCoefficient(coeff, 1));
    end for;

    // Include condition that c_{p^(n-1)} is zero.
    row := [];
    for i in [5..Rank(P)] do
        if i eq p^(n-1) + 7 then
            Append(~row, 1);
        else
            Append(~row, 0);
        end if;
    end for;
    Append(~A, row);
    Append(~b, 0);

    A := Matrix(B, A);
    b := VectorSpace(B, #b)!b;

    log_str("Built system.", start_time, verbose);

    soln := Solution(Transpose(A), b);

    log_str("Solved system.", start_time, verbose);

    // Substitute solutions
    subs := [P.1, P.2, P.3, P.4] cat [P!soln[i] : i in [1..Rank(P)-4]];
    Fn_with_unknowns := Evaluate(Fn_with_unknowns, subs);
    Hn_with_unknowns := Evaluate(Hn_with_unknowns, subs);

    // Bring back down to R
    subs := [x0, y0] cat [0 : i in [1..Rank(P)-2]];
    Fn_with_unknowns := Evaluate(Fn_with_unknowns, subs);
    Hn_with_unknowns := Evaluate(Hn_with_unknowns, subs);

    return soln[1], soln[2], Fn_with_unknowns, Hn_with_unknowns;
end function;

function canonical_lifting_odd_char(a0, b0, prec, verbose)
    B := Parent(a0);
    p := Characteristic(B);

    start_time := Realtime();
    log_str("Starting...", start_time, verbose);

    R<x0,y0,Fn,Hn,an,bn> := PolynomialRing(B, 6);

    va := [R!a0]; vb := [R!b0];
    vF := [x0]; vH := [R!1]; vy := [y0];

    if p eq 3 then
        f := x0^3 + a0*x0^2 + b0;
        h := a0;
    else
        f := x0^3 + a0*x0 + b0;
        h := B!Coefficient(f^((p-1) div 2), x0, p-1);
    end if;

    f_prime := Derivative(f, x0);

    log_str("Computed Hasse invariant.", start_time, verbose);

    // Compute x/y up to prec, if needed

    if prec gt 2 then
        P := FieldOfFractions(PolynomialRing(GF(p), prec*2));
        x_vec := [P.i : i in [1..prec]];
        y_vec := [P.i : i in [prec+1..2*prec]];
        x_over_y_witt := WittDiv(x_vec, y_vec);

        log_str("Computed x/y.", start_time, verbose);
    else
        x_over_y_witt := 0;
    end if;

    for n in [1..prec-1] do
        an, bn, Fn, Hn := canonical_lifting_odd_char_one_step(
            a0, b0, p, n, prec,
            f, h,
            va, vb, vF, vH, vy,
            B, R, x_over_y_witt,
            start_time, verbose
        );

        Append(~va, an);
        Append(~vb, bn);
        Append(~vF, Fn);
        Append(~vH, Hn);
        Append(~vy, y0*Hn);

        log_str("Appended.", start_time, verbose);
    end for;

    return va, vb, vF, vy;
end function;
